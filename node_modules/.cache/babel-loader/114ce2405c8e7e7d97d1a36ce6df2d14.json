{"ast":null,"code":"// //import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// const initalState = { counter: 0, ShowCounter: true };\n// /*\n// A function that accepts an initial state, an object of reducer functions,\n// and a \"slice name\", and automatically generates action creators and action\n// types that correspond to the reducers and state.\n// */\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initalState,\n//   reducers: {\n//     increment(state) {\n//       //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n//       state.counter++; // we can mutate state since this is fixed by immer internally\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload; //amount changes with payload\n//     },\n//     toggleCounter(state) {\n//       state.ShowCounter = !state.ShowCounter;\n//     },\n//   },\n// });\n// /*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n//  It can automatically combine your slice reducers, adds whatever Redux middleware you supply,\n//  includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n// ///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n// const store = configureStore({ reducer: counterSlice.reducer }); //we create store and passed the reducer function and now we r can access to reducer\n// export const counterActions = counterSlice.actions;\n// export default store; // export the store and provide to the components\n// //////the below code replaced by the above code which is the same but shorter and managable\n// // const counterReducer = (state = initalState, action) => {\n// //   if (action.type === \"increment\") {\n// //     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n// //     /*\n// //     //this is wrong   dont mutate existing state like this instead override it by returning it\n// //     state ++\n// //     return state\n// //     ///or\n// //     state ++\n// //     return{\n// //       counter:state.counter\n// //       ShowCounter: state.ShowCounter,\n// //     } */\n// //     //correct way of overriding the existing state  by returning new brand object\n// //     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n// //     return {\n// //       counter: state.counter + 1,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"increase\") {\n// //     return {\n// //       counter: state.counter + action.amount,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"decerement\") {\n// //     return {\n// //       counter: state.counter - 1,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"toggle\") {\n// //     return {\n// //       counter: state.counter,\n// //       ShowCounter: !state.ShowCounter,\n// //     };\n// //   }\n// //   return state;\n// // };\n// // const store = createStore(counterReducer); //we create store and passed the reducer function on it\n// // export default store; // export the store and provide to the components","map":{"version":3,"sources":["/Users/luulnegasi/Desktop/REDUX STARTER /src/store/indexStore.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// //import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// const initalState = { counter: 0, ShowCounter: true };\n// /*\n// A function that accepts an initial state, an object of reducer functions,\n// and a \"slice name\", and automatically generates action creators and action\n// types that correspond to the reducers and state.\n// */\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initalState,\n//   reducers: {\n//     increment(state) {\n//       //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n//       state.counter++; // we can mutate state since this is fixed by immer internally\n//     },\n\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload; //amount changes with payload\n//     },\n//     toggleCounter(state) {\n//       state.ShowCounter = !state.ShowCounter;\n//     },\n//   },\n// });\n\n// /*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n//  It can automatically combine your slice reducers, adds whatever Redux middleware you supply,\n//  includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n\n// ///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n\n// const store = configureStore({ reducer: counterSlice.reducer }); //we create store and passed the reducer function and now we r can access to reducer\n// export const counterActions = counterSlice.actions;\n// export default store; // export the store and provide to the components\n\n// //////the below code replaced by the above code which is the same but shorter and managable\n\n// // const counterReducer = (state = initalState, action) => {\n// //   if (action.type === \"increment\") {\n// //     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n// //     /*\n// //     //this is wrong   dont mutate existing state like this instead override it by returning it\n\n// //     state ++\n// //     return state\n\n// //     ///or\n// //     state ++\n// //     return{\n// //       counter:state.counter\n// //       ShowCounter: state.ShowCounter,\n// //     } */\n// //     //correct way of overriding the existing state  by returning new brand object\n// //     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n// //     return {\n// //       counter: state.counter + 1,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"increase\") {\n// //     return {\n// //       counter: state.counter + action.amount,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"decerement\") {\n// //     return {\n// //       counter: state.counter - 1,\n// //       ShowCounter: state.ShowCounter,\n// //     };\n// //   }\n// //   if (action.type === \"toggle\") {\n// //     return {\n// //       counter: state.counter,\n// //       ShowCounter: !state.ShowCounter,\n// //     };\n// //   }\n// //   return state;\n// // };\n// // const store = createStore(counterReducer); //we create store and passed the reducer function on it\n\n// // export default store; // export the store and provide to the components\n"]},"metadata":{},"sourceType":"module"}