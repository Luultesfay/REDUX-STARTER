{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initalState = {\n  counter: 0,\n  ShowCounter: true\n};\n/*\nA function that accepts an initial state, an object of reducer functions, \nand a \"slice name\", and automatically generates action creators and action \ntypes that correspond to the reducers and state.\n*/\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n      state.counter++; // we can mutate state since this is fixed by immer internally\n    }\n\n  },\n\n  decerement(state) {\n    state.counter--;\n  },\n\n  increase(state, action) {\n    state.counter = state.counter + action.amount;\n  },\n\n  toggle(state) {\n    state.ShowCounter = !state.ShowCounter;\n  }\n\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"increment\") {\n    //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n\n    /*\n    //this is wrong   dont mutate existing state like this instead override it by returning it\n    \n    state ++\n    return state \n    \n    ///or\n    state ++\n    return{\n      counter:state.counter\n      ShowCounter: state.ShowCounter,\n    } */\n    //correct way of overriding the existing state  by returning new brand object\n    //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n    return {\n      counter: state.counter + 1,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"decerement\") {\n    return {\n      counter: state.counter - 1,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      ShowCounter: !state.ShowCounter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer); //we create store and passed the reducer function on it\n\nexport default store; // export the store and provide to the components","map":{"version":3,"sources":["/Users/luulnegasi/Desktop/REDUX STARTER /src/store/indexStore.js"],"names":["createStore","createSlice","initalState","counter","ShowCounter","counterSlice","name","reducers","increment","state","decerement","increase","action","amount","toggle","counterReducer","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAApB;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,WAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACf;AACAA,MAAAA,KAAK,CAACN,OAAN,GAFe,CAEE;AAClB;;AAJO,GAHqB;;AAS/BO,EAAAA,UAAU,CAACD,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACN,OAAN;AACD,GAX8B;;AAY/BQ,EAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,IAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAAvC;AACD,GAd8B;;AAe/BC,EAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,IAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAjB8B,CAAD,CAAhC;;AAoBA,MAAMW,cAAc,GAAG,YAAiC;AAAA,MAAhCN,KAAgC,uEAAxBP,WAAwB;AAAA,MAAXU,MAAW;;AACtD,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFd,KAAP;AAID;;AACD,MAAIQ,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,MAD3B;AAELT,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFd,KAAP;AAID;;AACD,MAAIQ,MAAM,CAACI,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEK,KAAK,CAACL;AAFd,KAAP;AAID;;AACD,MAAIQ,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLb,MAAAA,OAAO,EAAEM,KAAK,CAACN,OADV;AAELC,MAAAA,WAAW,EAAE,CAACK,KAAK,CAACL;AAFf,KAAP;AAID;;AACD,SAAOK,KAAP;AACD,CAzCD;;AA0CA,MAAMQ,KAAK,GAAGjB,WAAW,CAACe,cAAD,CAAzB,C,CAA2C;;AAE3C,eAAeE,KAAf,C,CAAsB","sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initalState = { counter: 0, ShowCounter: true };\n/*\nA function that accepts an initial state, an object of reducer functions, \nand a \"slice name\", and automatically generates action creators and action \ntypes that correspond to the reducers and state.\n*/\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n      state.counter++; // we can mutate state since this is fixed by immer internally\n    },\n  },\n  decerement(state) {\n    state.counter--;\n  },\n  increase(state, action) {\n    state.counter = state.counter + action.amount;\n  },\n  toggle(state) {\n    state.ShowCounter = !state.ShowCounter;\n  },\n});\n\nconst counterReducer = (state = initalState, action) => {\n  if (action.type === \"increment\") {\n    //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n    /*\n    //this is wrong   dont mutate existing state like this instead override it by returning it\n    \n    state ++\n    return state \n    \n    ///or\n    state ++\n    return{\n      counter:state.counter\n      ShowCounter: state.ShowCounter,\n    } */\n    //correct way of overriding the existing state  by returning new brand object\n    //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n    return {\n      counter: state.counter + 1,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"decerement\") {\n    return {\n      counter: state.counter - 1,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      ShowCounter: !state.ShowCounter,\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer); //we create store and passed the reducer function on it\n\nexport default store; // export the store and provide to the components\n"]},"metadata":{},"sourceType":"module"}