{"ast":null,"code":"///reduxtoolkit advantages\n\n/*-don't have to worry about creating action objects on our own\nand about coming up with unique identifiers\nand about avoiding typos*/\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; //payload is afield name That Redux Toolkit give us by default its not up to us to call it payload\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); //adding the second slice that manage the authentication\n\nconst intialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: \"Authentication\",\n  initialState: intialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  } //when we work with multiple Createslice() we shouldand must only have one store\n\n});\nexport const counterActions = counterSlice.actions; //counterSlice.actions.toggleCounter or increment or decrement  when this methods calls they produce action of objects with type property\n\nexport const authActions = authSlice.actions;\nexport default store;\n/*Note\nRedux Toolkit has a configureStore() method that simplifies the store setup process. \nconfigureStore() wraps around the Redux library's createStore() method and the combineReducers() method, \nand handles most of the store setup for us automatically.\n*/\n/////////////////////////////////////////////////////////////////////////////////\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// const initalState = { counter: 0, ShowCounter: true };\n// /*\n//createSlice\n// A function that accepts an initial state, an object of reducer functions,\n// and a \"slice name\", and automatically generates action creators and action\n// types that correspond to the reducers and state.\n// */\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initalState,\n//   reducers: {\n//     increment(state) {\n//       //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n//       state.counter++; // we can mutate state since this is fixed by immer internally\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload; //amount changes with payload\n//     },\n//     toggleCounter(state) {\n//       state.ShowCounter = !state.ShowCounter;\n//     },\n//   },\n// });\n// /*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n//  It can automatically combine your slice reducers, adds whatever Redux middleware you supply,\n//  includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n// ///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n// const store = configureStore({ reducer: counterSlice.reducer }); //we create store and passed the reducer function and now we r can access to reducer\n// export const counterActions = counterSlice.actions;\n// export default store; // export the store and provide to the components\n//////the below code replaced by the above code which is the same but shorter and managable\n//import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\n// const counterReducer = (state = initalState, action) => {\n//   if (action.type === \"increment\") {\n//     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n//     /*\n//     //this is wrong   dont mutate existing state like this instead override it by returning it\n//     state ++\n//     return state\n//     ///or\n//     state ++\n//     return{\n//       counter:state.counter\n//       ShowCounter: state.ShowCounter,\n//     } */\n//     //correct way of overriding the existing state  by returning new brand object\n//     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n//     return {\n//       counter: state.counter + 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"decerement\") {\n//     return {\n//       counter: state.counter - 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       ShowCounter: !state.ShowCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer); //we create store and passed the reducer function on it\n// export default store; // export the store and provide to the components","map":{"version":3,"sources":["/Users/luulnegasi/Desktop/REDUX STARTER /src/store/indexStore.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","intialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA;;AACA;AACA;AACA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAEL,mBAFiB;AAG/BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KAHO;;AAIRQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACP,OAAN;AACD,KANO;;AAORS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADsB,CAC0B;AACjD,KATO;;AAURC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACD;;AAZO;AAHqB,CAAD,CAAhC,C,CAmBA;;AACA,MAAMY,eAAe,GAAG;AACtBC,EAAAA,eAAe,EAAE;AADK,CAAxB;AAGA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,YAAY,EAAES,eAFc;AAG5BR,EAAAA,QAAQ,EAAE;AACRW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACD,KAHO;;AAIRG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACD;;AANO;AAHkB,CAAD,CAA7B;AAaA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAC3BqB,EAAAA,OAAO,EAAE;AAAEnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OAAxB;AAAiCC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAAjD,GADkB,CAC0C;;AAD1C,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC,C,CAA6C;;AACpD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B;AACP,eAAeJ,KAAf;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["///reduxtoolkit advantages\n/*-don't have to worry about creating action objects on our own\nand about coming up with unique identifiers\nand about avoiding typos*/\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; //payload is afield name That Redux Toolkit give us by default its not up to us to call it payload\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\n//adding the second slice that manage the authentication\nconst intialAuthState = {\n  isAuthenticated: false,\n};\nconst authSlice = createSlice({\n  name: \"Authentication\",\n  initialState: intialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer }, //when we work with multiple Createslice() we shouldand must only have one store\n});\n\nexport const counterActions = counterSlice.actions; //counterSlice.actions.toggleCounter or increment or decrement  when this methods calls they produce action of objects with type property\nexport const authActions = authSlice.actions;\nexport default store;\n\n/*Note\nRedux Toolkit has a configureStore() method that simplifies the store setup process. \nconfigureStore() wraps around the Redux library's createStore() method and the combineReducers() method, \nand handles most of the store setup for us automatically.\n*/\n\n/////////////////////////////////////////////////////////////////////////////////\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n// const initalState = { counter: 0, ShowCounter: true };\n// /*\n//createSlice\n// A function that accepts an initial state, an object of reducer functions,\n// and a \"slice name\", and automatically generates action creators and action\n// types that correspond to the reducers and state.\n// */\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initalState,\n//   reducers: {\n//     increment(state) {\n//       //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n//       state.counter++; // we can mutate state since this is fixed by immer internally\n//     },\n\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload; //amount changes with payload\n//     },\n//     toggleCounter(state) {\n//       state.ShowCounter = !state.ShowCounter;\n//     },\n//   },\n// });\n\n// /*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n//  It can automatically combine your slice reducers, adds whatever Redux middleware you supply,\n//  includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n\n// ///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n\n// const store = configureStore({ reducer: counterSlice.reducer }); //we create store and passed the reducer function and now we r can access to reducer\n// export const counterActions = counterSlice.actions;\n// export default store; // export the store and provide to the components\n\n//////the below code replaced by the above code which is the same but shorter and managable\n//import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\n// const counterReducer = (state = initalState, action) => {\n//   if (action.type === \"increment\") {\n//     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n//     /*\n//     //this is wrong   dont mutate existing state like this instead override it by returning it\n\n//     state ++\n//     return state\n\n//     ///or\n//     state ++\n//     return{\n//       counter:state.counter\n//       ShowCounter: state.ShowCounter,\n//     } */\n//     //correct way of overriding the existing state  by returning new brand object\n//     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n//     return {\n//       counter: state.counter + 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"decerement\") {\n//     return {\n//       counter: state.counter - 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       ShowCounter: !state.ShowCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer); //we create store and passed the reducer function on it\n\n// export default store; // export the store and provide to the components\n"]},"metadata":{},"sourceType":"module"}