{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initalState = {\n  counter: 0,\n  ShowCounter: true\n};\ncreateSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    }\n\n  },\n\n  decerement(state) {},\n\n  increase(state) {},\n\n  toggle() {}\n\n});\n\nconst counterReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"increment\") {\n    //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n\n    /*\n    //this is wrong   dont mutate existing state like this instead override it by returning it\n    \n    state ++\n    return state \n    \n    ///or\n    state ++\n    return{\n      counter:state.counter\n      ShowCounter: state.ShowCounter,\n    } */\n    //correct way of overriding the existing state  by returning new brand object\n    //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n    return {\n      counter: state.counter + 1,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"decerement\") {\n    return {\n      counter: state.counter - 1,\n      ShowCounter: state.ShowCounter\n    };\n  }\n\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      ShowCounter: !state.ShowCounter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer); //we create store and passed the reducer function on it\n\nexport default store; // export the store and provide to the components","map":{"version":3,"sources":["/Users/luulnegasi/Desktop/REDUX STARTER /src/store/indexStore.js"],"names":["createStore","createSlice","initalState","counter","ShowCounter","name","reducers","increment","state","decerement","increase","toggle","counterReducer","action","type","amount","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAApB;AAEAH,WAAW,CAAC;AACVI,EAAAA,IAAI,EAAE,SADI;AAEVH,EAAAA,WAFU;AAGVI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACL,OAAN;AACD;;AAHO,GAHA;;AAQVM,EAAAA,UAAU,CAACD,KAAD,EAAQ,CAAE,CARV;;AASVE,EAAAA,QAAQ,CAACF,KAAD,EAAQ,CAAE,CATR;;AAUVG,EAAAA,MAAM,GAAG,CAAE;;AAVD,CAAD,CAAX;;AAaA,MAAMC,cAAc,GAAG,YAAiC;AAAA,MAAhCJ,KAAgC,uEAAxBN,WAAwB;AAAA,MAAXW,MAAW;;AACtD,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA,WAAO;AACLX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBU,MAAM,CAACE,MAD3B;AAELX,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,WAAO;AACLX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AACD,MAAIS,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OADV;AAELC,MAAAA,WAAW,EAAE,CAACI,KAAK,CAACJ;AAFf,KAAP;AAID;;AACD,SAAOI,KAAP;AACD,CAzCD;;AA0CA,MAAMQ,KAAK,GAAGhB,WAAW,CAACY,cAAD,CAAzB,C,CAA2C;;AAE3C,eAAeI,KAAf,C,CAAsB","sourcesContent":["import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initalState = { counter: 0, ShowCounter: true };\n\ncreateSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n  },\n  decerement(state) {},\n  increase(state) {},\n  toggle() {},\n});\n\nconst counterReducer = (state = initalState, action) => {\n  if (action.type === \"increment\") {\n    //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n    /*\n    //this is wrong   dont mutate existing state like this instead override it by returning it\n    \n    state ++\n    return state \n    \n    ///or\n    state ++\n    return{\n      counter:state.counter\n      ShowCounter: state.ShowCounter,\n    } */\n    //correct way of overriding the existing state  by returning new brand object\n    //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n    return {\n      counter: state.counter + 1,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"decerement\") {\n    return {\n      counter: state.counter - 1,\n      ShowCounter: state.ShowCounter,\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      ShowCounter: !state.ShowCounter,\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer); //we create store and passed the reducer function on it\n\nexport default store; // export the store and provide to the components\n"]},"metadata":{},"sourceType":"module"}