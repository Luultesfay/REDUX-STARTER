{"ast":null,"code":"//import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initalState = {\n  counter: 0,\n  ShowCounter: true\n};\n/*\nA function that accepts an initial state, an object of reducer functions, \nand a \"slice name\", and automatically generates action creators and action \ntypes that correspond to the reducers and state.\n*/\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n      state.counter++; // we can mutate state since this is fixed by immer internally\n    },\n\n    decerement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; //amount changes with payload\n    },\n\n    toggleCounter(state) {\n      state.ShowCounter = !state.ShowCounter;\n    }\n\n  }\n});\n/*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n It can automatically combine your slice reducers, adds whatever Redux middleware you supply, \n includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //we create store and passed the reducer function and now we r can access to reducer\n\nexport const counterActions = counterSlice.actions;\nexport default store; // export the store and provide to the components\n//////the below code replaced by the above code which is the same but shorter and managable\n// const counterReducer = (state = initalState, action) => {\n//   if (action.type === \"increment\") {\n//     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n//     /*\n//     //this is wrong   dont mutate existing state like this instead override it by returning it\n//     state ++\n//     return state\n//     ///or\n//     state ++\n//     return{\n//       counter:state.counter\n//       ShowCounter: state.ShowCounter,\n//     } */\n//     //correct way of overriding the existing state  by returning new brand object\n//     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n//     return {\n//       counter: state.counter + 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"decerement\") {\n//     return {\n//       counter: state.counter - 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       ShowCounter: !state.ShowCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer); //we create store and passed the reducer function on it\n// export default store; // export the store and provide to the components","map":{"version":3,"sources":["/Users/luulnegasi/Desktop/REDUX STARTER /src/store/indexStore.js"],"names":["createSlice","configureStore","initalState","counter","ShowCounter","counterSlice","name","reducers","increment","state","decerement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAApB;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC/BM,EAAAA,IAAI,EAAE,SADyB;AAE/BJ,EAAAA,WAF+B;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACf;AACAA,MAAAA,KAAK,CAACN,OAAN,GAFe,CAEE;AAClB,KAJO;;AAMRO,IAAAA,UAAU,CAACD,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACN,OAAN;AACD,KARO;;AASRQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACtBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC,CADsB,CAC0B;AACjD,KAXO;;AAYRC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACD;;AAdO;AAHqB,CAAD,CAAhC;AAqBA;AACA;AACA;AAEA;;AAEA,MAAMW,KAAK,GAAGd,cAAc,CAAC;AAAEe,EAAAA,OAAO,EAAEX,YAAY,CAACW;AAAxB,CAAD,CAA5B,C,CAAiE;;AACjE,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AACP,eAAeH,KAAf,C,CAAsB;AAEtB;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["//import { createStore } from \"redux\";//  we can  delete this one since we have this redux includede in @reduxjs/toolkit\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initalState = { counter: 0, ShowCounter: true };\n/*\nA function that accepts an initial state, an object of reducer functions, \nand a \"slice name\", and automatically generates action creators and action \ntypes that correspond to the reducers and state.\n*/\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initalState,\n  reducers: {\n    increment(state) {\n      //here we passes the existing state  and then mutate the state , note: we  mutate the state wihch is wrong but redux toolkit fixes tis behind the scine using  'immer library'\n      state.counter++; // we can mutate state since this is fixed by immer internally\n    },\n\n    decerement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; //amount changes with payload\n    },\n    toggleCounter(state) {\n      state.ShowCounter = !state.ShowCounter;\n    },\n  },\n});\n\n/*configureStore(): wraps createStore to provide simplified configuration options and good defaults.\n It can automatically combine your slice reducers, adds whatever Redux middleware you supply, \n includes redux-thunk by default, and enables use of the Redux DevTools Extension.*/\n\n///ConfigureStore like createStore creates a store but it makes merging multiple reducers into one reducer\n\nconst store = configureStore({ reducer: counterSlice.reducer }); //we create store and passed the reducer function and now we r can access to reducer\nexport const counterActions = counterSlice.actions;\nexport default store; // export the store and provide to the components\n\n//////the below code replaced by the above code which is the same but shorter and managable\n\n// const counterReducer = (state = initalState, action) => {\n//   if (action.type === \"increment\") {\n//     //NOTE:when working with Redux.You should never change the existing state.Instead, always override it by returning a brand new state object.\n//     /*\n//     //this is wrong   dont mutate existing state like this instead override it by returning it\n\n//     state ++\n//     return state\n\n//     ///or\n//     state ++\n//     return{\n//       counter:state.counter\n//       ShowCounter: state.ShowCounter,\n//     } */\n//     //correct way of overriding the existing state  by returning new brand object\n//     //note when ever we return we should return exsting state with the modified one   for example here we added in all show counter\n//     return {\n//       counter: state.counter + 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"decerement\") {\n//     return {\n//       counter: state.counter - 1,\n//       ShowCounter: state.ShowCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       ShowCounter: !state.ShowCounter,\n//     };\n//   }\n//   return state;\n// };\n// const store = createStore(counterReducer); //we create store and passed the reducer function on it\n\n// export default store; // export the store and provide to the components\n"]},"metadata":{},"sourceType":"module"}